{
	"id": "323d2bf2-44e6-12d1-59da-63c5246375b1",
	"name": "create policy json threat",
	"description": "",
	"order": [
		"67979e7a-410f-e3a3-fea0-ea29bf6d3fb3",
		"88b6ca48-dc65-ed0e-6449-487c0eda7de9",
		"0c3c877d-207d-a09f-14cf-7adab1691ac7",
		"2b2d34a6-17a0-ee8b-1180-e492e5e56a64"
	],
	"folders": [],
	"timestamp": 1455631392936,
	"owner": "696077",
	"public": false,
	"published": false,
	"hasRequests": true,
	"requests": [
		{
			"id": "0c3c877d-207d-a09f-14cf-7adab1691ac7",
			"headers": "Authorization: {{authorization-token}}\nContent-Type: application/vnd.ms-azure-apim.policy+xml\nIf-Match: *\n",
			"url": "{{management-api-url}}//apis/{{api-id}}/operations/create-user/policy?api-version={{version}}",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "323d2bf2-44e6-12d1-59da-63c5246375b1",
			"data": [],
			"dataMode": "raw",
			"name": "GET json-threat policy",
			"description": "",
			"descriptionFormat": "html",
			"time": 1466994939598,
			"version": 2,
			"responses": [],
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "<policies>\r\n  <inbound>\r\n  <!--  Set your conditions here -->\r\n  <!-- Any payload violating these criteria will be rejected by the API Management proxy -->\r\n    <set-variable name=\"ALLOWED_DEPTH\" value='@{return 10;}' />\r\n    <set-variable name=\"ALLOWED_NUMBER_OF_PROPERTIES\" value='@{return 10;}' />\r\n    <set-variable name=\"ALLOWED_ARRAY_LENGTH\" value='@{return 10;}' />\r\n    <set-variable name=\"ALLOWED_CONTENT_LENGTH\" value='@{return 4096;}' />\r\n    \r\n    <set-variable name=\"startTimeTicks\" value='@{ return DateTime.UtcNow.Ticks;}' />\r\n      <set-variable name=\"contentAsString\" value='@((string)context.Request.Body.As&lt;String&gt;(preserveContent: true))' />\r\n          <choose>\r\n              <when condition='@(((string)context.Variables[\"contentAsString\"]).Length &lt;=  ((int)context.Variables[\"ALLOWED_CONTENT_LENGTH\"]))'>\r\n                   <set-variable name='jsonDepth' value='@{\r\n            var sourceString = (string)context.Variables[\"contentAsString\"];\r\n            var stack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n            int MAX_DEPTH = 0;\r\n            for (int i=0;i&lt;sourceString.Length;i++)\r\n            {\r\n              var token = sourceString[i];\r\n              if(token == 123 || token == 91)\r\n              {\r\n                stack.Push(sourceString[i]);\r\n              }\r\n              if(token == 125 || token == 93)\r\n              {\r\n                  if(stack.Count &gt; 0)\r\n                  {\r\n                  \r\n                     MAX_DEPTH = MAX_DEPTH &gt; stack.Count ? MAX_DEPTH : stack.Count;\r\n                     stack.Pop();\r\n                  }\r\n              }\r\n            \r\n            }\r\n            \r\n            return MAX_DEPTH;\r\n\r\n}' />\r\n        <set-variable name='jsonArrayLength' value='@{\r\n          \r\n            const char COMMA = (char)44;\r\n            const char CURLY_OPEN = (char)123;\r\n            const char CURLY_CLOSE = (char)125;\r\n            const char ARRAY_OPEN = (char)91;\r\n            const char ARRAY_CLOSE = (char)93;\r\n            const char SINGLE_QUOTE = (char)39;\r\n            const char DOUBLE_QUOTE = (char)34;\r\n\r\n            int MAX_NUMBER_OF_ARRAY_ITEMS = 0;\r\n            \r\n            var originalString = (string) context.Variables[\"contentAsString\"];\r\n            var sourceString = originalString;\r\n\r\n            var listString  = new List&lt;string&gt;(); \r\n            char[] parenthesis = { (char)91, (char)93 };\r\n            int arrayStarting=0, arrayEnding=0;\r\n            var stack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n            while (sourceString.Contains(parenthesis[0]))\r\n            {\r\n                for(int i=0;i&lt;sourceString.Length;i++)\r\n                {\r\n                    if(sourceString[i] == parenthesis[0])\r\n                    {\r\n                        stack.Push(parenthesis[0]);\r\n                        if (stack.Count == 1)\r\n                        {\r\n                            arrayStarting = i;\r\n                        }\r\n                    }\r\n                    if(sourceString[i] == parenthesis[1])\r\n                    {\r\n                        if (stack.Count &gt; 0)\r\n                        {\r\n                            stack.Pop();\r\n                            if (stack.Count == 0)\r\n                            {\r\n                                arrayEnding = i;\r\n                                break;\r\n                            }\r\n                        }\r\n                       \r\n                    }\r\n                }\r\n                var tempString = sourceString.Substring(arrayStarting, arrayEnding - arrayStarting + 1);\r\n                var remaining = sourceString.Substring(arrayEnding);\r\n                listString.Add(tempString);\r\n                sourceString = tempString.Substring(1, tempString.Length - 2) + remaining;\r\n            }\r\n            foreach (var jsonString in listString)\r\n            {\r\n                 var trimmed = jsonString.Substring(1, jsonString.Length - 2);\r\n                var frontStack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n                 var backTrack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n                 for (int i = 0; i &lt; trimmed.Length; i++)\r\n                {\r\n                    var currentCar = trimmed[i];\r\n                    if (currentCar == COMMA  || currentCar == CURLY_OPEN || currentCar == ARRAY_OPEN\r\n                        || currentCar == SINGLE_QUOTE\r\n                        || currentCar == DOUBLE_QUOTE)\r\n                    {\r\n                        switch (currentCar)\r\n                        {\r\n                            case CURLY_OPEN:\r\n                                backTrack.Push(CURLY_CLOSE);\r\n                                break;\r\n                            case ARRAY_OPEN:\r\n                                backTrack.Push(ARRAY_CLOSE);\r\n                                break;\r\n                            case SINGLE_QUOTE:\r\n                                backTrack.Push(SINGLE_QUOTE);\r\n                                break;\r\n                            case DOUBLE_QUOTE:\r\n                                backTrack.Push(DOUBLE_QUOTE);\r\n                                break;\r\n                        }\r\n                        frontStack.Push(currentCar);\r\n                    }\r\n                    if (backTrack.Count &gt; 0 &amp;&amp; currentCar == backTrack.Peek())\r\n                    {\r\n                        var backTrackTop = backTrack.Peek();\r\n                        var backTrackBalance = 0;\r\n                        switch ((int)backTrackTop)\r\n                        {\r\n                            case 39:\r\n                                backTrackBalance = 39;\r\n                                break;\r\n                            case 34:\r\n                                backTrackBalance = 34;\r\n                                break;\r\n                            case 125:\r\n                                backTrackBalance = 123;\r\n                                break;\r\n                            case 93:\r\n                                backTrackBalance = 91;\r\n                                break;\r\n                        }\r\n                        while (frontStack.Peek() != backTrackBalance)\r\n                        {\r\n                            frontStack.Pop();\r\n                        }\r\n                        frontStack.Pop();\r\n                        backTrack.Pop();\r\n                    }\r\n\r\n                }\r\n                 MAX_NUMBER_OF_ARRAY_ITEMS = MAX_NUMBER_OF_ARRAY_ITEMS &gt; frontStack.Count + 1 ? MAX_NUMBER_OF_ARRAY_ITEMS : frontStack.Count + 1;\r\n\r\n            }\r\n           return MAX_NUMBER_OF_ARRAY_ITEMS;\r\n\r\n}' />\r\n            \r\n             <set-variable name='jsonPropertyLength' value='@{\r\n               const char COMMA = (char)44;\r\n            const char CURLY_OPEN = (char)123;\r\n            const char CURLY_CLOSE = (char)125;\r\n            const char ARRAY_OPEN = (char)91;\r\n            const char ARRAY_CLOSE = (char)93;\r\n            const char SINGLE_QUOTE = (char)39;\r\n            const char DOUBLE_QUOTE = (char)34;\r\n            int MAX_PROPERTIES_IN_AN_OBJECT = 0;\r\n            \r\n            var originalString = (string) context.Variables[\"contentAsString\"];\r\n            var sourceString = originalString;\r\n\r\n            var listString  = new List&lt;string&gt;(); \r\n            char[] parenthesis = { (char)123, (char)125 };\r\n            int arrayStarting=0, arrayEnding=0;\r\n            var stack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n            while (sourceString.Contains(parenthesis[0]))\r\n            {\r\n                for (int i = 0; i &lt; sourceString.Length; i++)\r\n                {\r\n                    if (sourceString[i] == parenthesis[0])\r\n                    {\r\n                        stack.Push(parenthesis[0]);\r\n                        if (stack.Count == 1)\r\n                        {\r\n                            arrayStarting = i;\r\n                        }\r\n                    }\r\n                    if (sourceString[i] == parenthesis[1])\r\n                    {\r\n                        if (stack.Count &gt; 0)\r\n                        {\r\n                            stack.Pop();\r\n                            if (stack.Count == 0)\r\n                            {\r\n                                arrayEnding = i;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n                var tempString = sourceString.Substring(arrayStarting, arrayEnding - arrayStarting + 1);\r\n                var remaining = sourceString.Substring(arrayEnding);\r\n                listString.Add(tempString);\r\n                sourceString = tempString.Substring(1, tempString.Length - 2) + remaining;\r\n            }\r\n            foreach (var jsonString in listString)\r\n            {\r\n                var trimmed = jsonString.Substring(1, jsonString.Length - 2);\r\n                var frontTrack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n                var backTrack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n                for (int i = 0; i &lt; trimmed.Length; i++)\r\n                {\r\n                    var currentCar = trimmed[i];\r\n                    if (currentCar == COMMA /*comma*/ || currentCar == CURLY_OPEN || currentCar == ARRAY_OPEN\r\n                        || currentCar == SINGLE_QUOTE\r\n                        || currentCar == DOUBLE_QUOTE)\r\n                    {\r\n                        switch (currentCar)\r\n                        {\r\n                            case CURLY_OPEN:\r\n                                backTrack.Push(CURLY_CLOSE);\r\n                                break;\r\n                            case ARRAY_OPEN:\r\n                                backTrack.Push(ARRAY_CLOSE);\r\n                                break;\r\n                            case SINGLE_QUOTE:\r\n                                backTrack.Push(SINGLE_QUOTE);\r\n                                break;\r\n                            case DOUBLE_QUOTE:\r\n                                backTrack.Push(DOUBLE_QUOTE);\r\n                                break;\r\n                        }\r\n                        frontTrack.Push(currentCar);\r\n                    }\r\n                    if (backTrack.Count &gt; 0 &amp;&amp; currentCar == backTrack.Peek())\r\n                    {\r\n                        var backTrackTop = backTrack.Peek();\r\n                        var backTrackBalance = 0;\r\n                        switch ((int)backTrackTop)\r\n                        {\r\n                            case 39:\r\n                                backTrackBalance = 39;\r\n                                break;\r\n                            case 34:\r\n                                backTrackBalance = 34;\r\n                                break;\r\n                            case 125:\r\n                                backTrackBalance = 123;\r\n                                break;\r\n                            case 93:\r\n                                backTrackBalance = 91;\r\n                                break;\r\n                        }\r\n                        while (frontTrack.Peek() != backTrackBalance)\r\n                        {\r\n                            frontTrack.Pop();\r\n                        }\r\n                        frontTrack.Pop();\r\n                        backTrack.Pop();\r\n                    }\r\n\r\n                }\r\n                var count = frontTrack.Count + 1;\r\n                MAX_PROPERTIES_IN_AN_OBJECT = MAX_PROPERTIES_IN_AN_OBJECT &gt; frontTrack.Count + 1 ? MAX_PROPERTIES_IN_AN_OBJECT : frontTrack.Count + 1;\r\n\r\n            }\r\n            return MAX_PROPERTIES_IN_AN_OBJECT;\r\n            }' />\r\n              </when>\r\n              <otherwise>\r\n                  <return-response >\r\n                   <set-status code=\"400\" reason='@{ return \"JSON ERROR: Content length is greater than permisibble limit of: \" + (int)context.Variables[\"ALLOWED_CONTENT_LENGTH\"] + \" byte(s)\"; }' />\r\n                </return-response>\r\n              </otherwise>\r\n          </choose>\r\n     \r\n                 \r\n                  <set-variable name=\"endTimeTicks\" value='@{ return DateTime.UtcNow.Ticks;}' />\r\n        <choose>\r\n                              \r\n             <when condition='@((int)context.Variables[\"jsonDepth\"] &gt; (int)context.Variables[\"ALLOWED_DEPTH\"])'>\r\n                <return-response >\r\n                   <set-status code=\"400\" reason='@{ return \"JSON ERROR: object depth is more than permisibble limit of: \" + (int)context.Variables[\"ALLOWED_DEPTH\"]; }' />\r\n                         <set-body>@{\r\n                return new JObject(\r\n                        new JProperty(\"Time Taken to parse for JSON Threat (in ms)\",(((long)(context.Variables[\"endTimeTicks\"]) - ((long)(context.Variables[\"startTimeTicks\"])))))\r\n                        ).ToString();\r\n            }</set-body>\r\n                </return-response>\r\n             </when>\r\n              <when condition='@((int)context.Variables[\"jsonArrayLength\"] &gt; (int)context.Variables[\"ALLOWED_ARRAY_LENGTH\"])'>\r\n                <return-response >\r\n                   <set-status code=\"400\" reason='@{ return \"JSON ERROR: array length more than permisibble limit of: \" + (int)context.Variables[\"ALLOWED_ARRAY_LENGTH\"]; }' />\r\n                         <set-body>@{\r\n                return new JObject(\r\n                        new JProperty(\"Time Taken to parse for JSON Threat (in ms)\",(((long)(context.Variables[\"endTimeTicks\"]) - ((long)(context.Variables[\"startTimeTicks\"]))))/10000)\r\n                        ).ToString();\r\n            }</set-body>\r\n                </return-response>\r\n             </when>\r\n               <when condition='@((int)context.Variables[\"jsonPropertyLength\"] &gt; (int)context.Variables[\"ALLOWED_NUMBER_OF_PROPERTIES\"])'>\r\n                <return-response >\r\n                   <set-status code=\"400\" reason='@{ return \"JSON ERROR: Number of properties more than permisibble limit of: \" + (int)context.Variables[\"ALLOWED_NUMBER_OF_PROPERTIES\"]; }' />\r\n                      <set-body>@{\r\n                return new JObject(\r\n                        new JProperty(\"Time Taken to parse for JSON Threat (in ms)\",(((long)(context.Variables[\"endTimeTicks\"]) - ((long)(context.Variables[\"startTimeTicks\"]))))/10000)\r\n                        ).ToString();\r\n            }</set-body>\r\n                </return-response>\r\n             </when>\r\n       \r\n        </choose>                  \r\n\r\n    <base />\r\n  </inbound>\r\n  <outbound>\r\n    <base />\r\n   \r\n   \r\n  </outbound>\r\n</policies>"
		},
		{
			"id": "2b2d34a6-17a0-ee8b-1180-e492e5e56a64",
			"headers": "Authorization: {{authorization-token}}\nContent-Type: application/vnd.ms-azure-apim.policy+xml\nIf-Match: *\n",
			"url": "{{management-api-url}}//apis/{{api-id}}/operations/create-user/policy?api-version={{version}}",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "DELETE",
			"collectionId": "323d2bf2-44e6-12d1-59da-63c5246375b1",
			"data": [],
			"dataMode": "raw",
			"name": "DEL json-threat policy",
			"description": "",
			"descriptionFormat": "html",
			"time": 1466994966728,
			"version": 2,
			"responses": [],
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "<policies>\r\n    <inbound>\r\n        <base />\r\n    </inbound>\r\n    <outbound>\r\n        <base />\r\n    </outbound>\r\n</policies>"
		},
		{
			"id": "67979e7a-410f-e3a3-fea0-ea29bf6d3fb3",
			"headers": "Authorization: {{authorization-token}}\nContent-Type: application/vnd.ms-azure-apim.policy+xml\nIf-Match: *\n",
			"url": "{{management-api-url}}//apis/{{api-id}}/operations/create-user/policy?api-version={{version}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466064684658,
			"name": "Create Policy (JSON Threat Protection)",
			"description": "Inspects JSON payload for any threat",
			"collectionId": "323d2bf2-44e6-12d1-59da-63c5246375b1",
			"rawModeData": "<policies>\r\n  <inbound>\r\n  <!--  Set your conditions here -->\r\n  <!-- Any payload violating these criteria will be rejected by the API Management proxy -->\r\n    <set-variable name=\"ALLOWED_DEPTH\" value='@{return 10;}' />\r\n    <set-variable name=\"ALLOWED_NUMBER_OF_PROPERTIES\" value='@{return 10;}' />\r\n    <set-variable name=\"ALLOWED_ARRAY_LENGTH\" value='@{return 10;}' />\r\n    <set-variable name=\"ALLOWED_CONTENT_LENGTH\" value='@{return 4096;}' />\r\n    \r\n    <set-variable name=\"startTimeTicks\" value='@{ return DateTime.UtcNow.Ticks;}' />\r\n      <set-variable name=\"contentAsString\" value='@((string)context.Request.Body.As&lt;String&gt;(preserveContent: true))' />\r\n          <choose>\r\n              <when condition='@(((string)context.Variables[\"contentAsString\"]).Length &lt;=  ((int)context.Variables[\"ALLOWED_CONTENT_LENGTH\"]))'>\r\n                   <set-variable name='jsonDepth' value='@{\r\n            var sourceString = (string)context.Variables[\"contentAsString\"];\r\n            var stack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n            int MAX_DEPTH = 0;\r\n            for (int i=0;i&lt;sourceString.Length;i++)\r\n            {\r\n              var token = sourceString[i];\r\n              if(token == 123 || token == 91)\r\n              {\r\n                stack.Push(sourceString[i]);\r\n              }\r\n              if(token == 125 || token == 93)\r\n              {\r\n                  if(stack.Count &gt; 0)\r\n                  {\r\n                  \r\n                     MAX_DEPTH = MAX_DEPTH &gt; stack.Count ? MAX_DEPTH : stack.Count;\r\n                     stack.Pop();\r\n                  }\r\n              }\r\n            \r\n            }\r\n            \r\n            return MAX_DEPTH;\r\n\r\n}' />\r\n        <set-variable name='jsonArrayLength' value='@{\r\n          \r\n            const char COMMA = (char)44;\r\n            const char CURLY_OPEN = (char)123;\r\n            const char CURLY_CLOSE = (char)125;\r\n            const char ARRAY_OPEN = (char)91;\r\n            const char ARRAY_CLOSE = (char)93;\r\n            const char SINGLE_QUOTE = (char)39;\r\n            const char DOUBLE_QUOTE = (char)34;\r\n\r\n            int MAX_NUMBER_OF_ARRAY_ITEMS = 0;\r\n            \r\n            var originalString = (string) context.Variables[\"contentAsString\"];\r\n            var sourceString = originalString;\r\n\r\n            var listString  = new List&lt;string&gt;(); \r\n            char[] parenthesis = { (char)91, (char)93 };\r\n            int arrayStarting=0, arrayEnding=0;\r\n            var stack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n            while (sourceString.Contains(parenthesis[0]))\r\n            {\r\n                for(int i=0;i&lt;sourceString.Length;i++)\r\n                {\r\n                    if(sourceString[i] == parenthesis[0])\r\n                    {\r\n                        stack.Push(parenthesis[0]);\r\n                        if (stack.Count == 1)\r\n                        {\r\n                            arrayStarting = i;\r\n                        }\r\n                    }\r\n                    if(sourceString[i] == parenthesis[1])\r\n                    {\r\n                        if (stack.Count &gt; 0)\r\n                        {\r\n                            stack.Pop();\r\n                            if (stack.Count == 0)\r\n                            {\r\n                                arrayEnding = i;\r\n                                break;\r\n                            }\r\n                        }\r\n                       \r\n                    }\r\n                }\r\n                var tempString = sourceString.Substring(arrayStarting, arrayEnding - arrayStarting + 1);\r\n                var remaining = sourceString.Substring(arrayEnding);\r\n                listString.Add(tempString);\r\n                sourceString = tempString.Substring(1, tempString.Length - 2) + remaining;\r\n            }\r\n            foreach (var jsonString in listString)\r\n            {\r\n                 var trimmed = jsonString.Substring(1, jsonString.Length - 2);\r\n                var frontStack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n                 var backTrack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n                 for (int i = 0; i &lt; trimmed.Length; i++)\r\n                {\r\n                    var currentCar = trimmed[i];\r\n                    if (currentCar == COMMA  || currentCar == CURLY_OPEN || currentCar == ARRAY_OPEN\r\n                        || currentCar == SINGLE_QUOTE\r\n                        || currentCar == DOUBLE_QUOTE)\r\n                    {\r\n                        switch (currentCar)\r\n                        {\r\n                            case CURLY_OPEN:\r\n                                backTrack.Push(CURLY_CLOSE);\r\n                                break;\r\n                            case ARRAY_OPEN:\r\n                                backTrack.Push(ARRAY_CLOSE);\r\n                                break;\r\n                            case SINGLE_QUOTE:\r\n                                backTrack.Push(SINGLE_QUOTE);\r\n                                break;\r\n                            case DOUBLE_QUOTE:\r\n                                backTrack.Push(DOUBLE_QUOTE);\r\n                                break;\r\n                        }\r\n                        frontStack.Push(currentCar);\r\n                    }\r\n                    if (backTrack.Count &gt; 0 &amp;&amp; currentCar == backTrack.Peek())\r\n                    {\r\n                        var backTrackTop = backTrack.Peek();\r\n                        var backTrackBalance = 0;\r\n                        switch ((int)backTrackTop)\r\n                        {\r\n                            case 39:\r\n                                backTrackBalance = 39;\r\n                                break;\r\n                            case 34:\r\n                                backTrackBalance = 34;\r\n                                break;\r\n                            case 125:\r\n                                backTrackBalance = 123;\r\n                                break;\r\n                            case 93:\r\n                                backTrackBalance = 91;\r\n                                break;\r\n                        }\r\n                        while (frontStack.Peek() != backTrackBalance)\r\n                        {\r\n                            frontStack.Pop();\r\n                        }\r\n                        frontStack.Pop();\r\n                        backTrack.Pop();\r\n                    }\r\n\r\n                }\r\n                 MAX_NUMBER_OF_ARRAY_ITEMS = MAX_NUMBER_OF_ARRAY_ITEMS &gt; frontStack.Count + 1 ? MAX_NUMBER_OF_ARRAY_ITEMS : frontStack.Count + 1;\r\n\r\n            }\r\n           return MAX_NUMBER_OF_ARRAY_ITEMS;\r\n\r\n}' />\r\n            \r\n             <set-variable name='jsonPropertyLength' value='@{\r\n               const char COMMA = (char)44;\r\n            const char CURLY_OPEN = (char)123;\r\n            const char CURLY_CLOSE = (char)125;\r\n            const char ARRAY_OPEN = (char)91;\r\n            const char ARRAY_CLOSE = (char)93;\r\n            const char SINGLE_QUOTE = (char)39;\r\n            const char DOUBLE_QUOTE = (char)34;\r\n            int MAX_PROPERTIES_IN_AN_OBJECT = 0;\r\n            \r\n            var originalString = (string) context.Variables[\"contentAsString\"];\r\n            var sourceString = originalString;\r\n\r\n            var listString  = new List&lt;string&gt;(); \r\n            char[] parenthesis = { (char)123, (char)125 };\r\n            int arrayStarting=0, arrayEnding=0;\r\n            var stack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n            while (sourceString.Contains(parenthesis[0]))\r\n            {\r\n                for (int i = 0; i &lt; sourceString.Length; i++)\r\n                {\r\n                    if (sourceString[i] == parenthesis[0])\r\n                    {\r\n                        stack.Push(parenthesis[0]);\r\n                        if (stack.Count == 1)\r\n                        {\r\n                            arrayStarting = i;\r\n                        }\r\n                    }\r\n                    if (sourceString[i] == parenthesis[1])\r\n                    {\r\n                        if (stack.Count &gt; 0)\r\n                        {\r\n                            stack.Pop();\r\n                            if (stack.Count == 0)\r\n                            {\r\n                                arrayEnding = i;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n                var tempString = sourceString.Substring(arrayStarting, arrayEnding - arrayStarting + 1);\r\n                var remaining = sourceString.Substring(arrayEnding);\r\n                listString.Add(tempString);\r\n                sourceString = tempString.Substring(1, tempString.Length - 2) + remaining;\r\n            }\r\n            foreach (var jsonString in listString)\r\n            {\r\n                var trimmed = jsonString.Substring(1, jsonString.Length - 2);\r\n                var frontTrack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n                var backTrack = new System.Collections.Generic.Stack&lt;char&gt;();\r\n                for (int i = 0; i &lt; trimmed.Length; i++)\r\n                {\r\n                    var currentCar = trimmed[i];\r\n                    if (currentCar == COMMA /*comma*/ || currentCar == CURLY_OPEN || currentCar == ARRAY_OPEN\r\n                        || currentCar == SINGLE_QUOTE\r\n                        || currentCar == DOUBLE_QUOTE)\r\n                    {\r\n                        switch (currentCar)\r\n                        {\r\n                            case CURLY_OPEN:\r\n                                backTrack.Push(CURLY_CLOSE);\r\n                                break;\r\n                            case ARRAY_OPEN:\r\n                                backTrack.Push(ARRAY_CLOSE);\r\n                                break;\r\n                            case SINGLE_QUOTE:\r\n                                backTrack.Push(SINGLE_QUOTE);\r\n                                break;\r\n                            case DOUBLE_QUOTE:\r\n                                backTrack.Push(DOUBLE_QUOTE);\r\n                                break;\r\n                        }\r\n                        frontTrack.Push(currentCar);\r\n                    }\r\n                    if (backTrack.Count &gt; 0 &amp;&amp; currentCar == backTrack.Peek())\r\n                    {\r\n                        var backTrackTop = backTrack.Peek();\r\n                        var backTrackBalance = 0;\r\n                        switch ((int)backTrackTop)\r\n                        {\r\n                            case 39:\r\n                                backTrackBalance = 39;\r\n                                break;\r\n                            case 34:\r\n                                backTrackBalance = 34;\r\n                                break;\r\n                            case 125:\r\n                                backTrackBalance = 123;\r\n                                break;\r\n                            case 93:\r\n                                backTrackBalance = 91;\r\n                                break;\r\n                        }\r\n                        while (frontTrack.Peek() != backTrackBalance)\r\n                        {\r\n                            frontTrack.Pop();\r\n                        }\r\n                        frontTrack.Pop();\r\n                        backTrack.Pop();\r\n                    }\r\n\r\n                }\r\n                var count = frontTrack.Count + 1;\r\n                MAX_PROPERTIES_IN_AN_OBJECT = MAX_PROPERTIES_IN_AN_OBJECT &gt; frontTrack.Count + 1 ? MAX_PROPERTIES_IN_AN_OBJECT : frontTrack.Count + 1;\r\n\r\n            }\r\n            return MAX_PROPERTIES_IN_AN_OBJECT;\r\n            }' />\r\n              </when>\r\n              <otherwise>\r\n                  <return-response >\r\n                   <set-status code=\"400\" reason='@{ return \"JSON ERROR: Content length is greater than permisibble limit of: \" + (int)context.Variables[\"ALLOWED_CONTENT_LENGTH\"] + \" byte(s)\"; }' />\r\n                </return-response>\r\n              </otherwise>\r\n          </choose>\r\n     \r\n                 \r\n                  <set-variable name=\"endTimeTicks\" value='@{ return DateTime.UtcNow.Ticks;}' />\r\n        <choose>\r\n                              \r\n             <when condition='@((int)context.Variables[\"jsonDepth\"] &gt; (int)context.Variables[\"ALLOWED_DEPTH\"])'>\r\n                <return-response >\r\n                   <set-status code=\"400\" reason='@{ return \"JSON ERROR: object depth is more than permisibble limit of: \" + (int)context.Variables[\"ALLOWED_DEPTH\"]; }' />\r\n                         <set-body>@{\r\n                return new JObject(\r\n                        new JProperty(\"Time Taken to parse for JSON Threat (in ms)\",(((long)(context.Variables[\"endTimeTicks\"]) - ((long)(context.Variables[\"startTimeTicks\"])))))\r\n                        ).ToString();\r\n            }</set-body>\r\n                </return-response>\r\n             </when>\r\n              <when condition='@((int)context.Variables[\"jsonArrayLength\"] &gt; (int)context.Variables[\"ALLOWED_ARRAY_LENGTH\"])'>\r\n                <return-response >\r\n                   <set-status code=\"400\" reason='@{ return \"JSON ERROR: array length more than permisibble limit of: \" + (int)context.Variables[\"ALLOWED_ARRAY_LENGTH\"]; }' />\r\n                         <set-body>@{\r\n                return new JObject(\r\n                        new JProperty(\"Time Taken to parse for JSON Threat (in ms)\",(((long)(context.Variables[\"endTimeTicks\"]) - ((long)(context.Variables[\"startTimeTicks\"]))))/10000)\r\n                        ).ToString();\r\n            }</set-body>\r\n                </return-response>\r\n             </when>\r\n               <when condition='@((int)context.Variables[\"jsonPropertyLength\"] &gt; (int)context.Variables[\"ALLOWED_NUMBER_OF_PROPERTIES\"])'>\r\n                <return-response >\r\n                   <set-status code=\"400\" reason='@{ return \"JSON ERROR: Number of properties more than permisibble limit of: \" + (int)context.Variables[\"ALLOWED_NUMBER_OF_PROPERTIES\"]; }' />\r\n                      <set-body>@{\r\n                return new JObject(\r\n                        new JProperty(\"Time Taken to parse for JSON Threat (in ms)\",(((long)(context.Variables[\"endTimeTicks\"]) - ((long)(context.Variables[\"startTimeTicks\"]))))/10000)\r\n                        ).ToString();\r\n            }</set-body>\r\n                </return-response>\r\n             </when>\r\n       \r\n        </choose>                  \r\n\r\n    <base />\r\n  </inbound>\r\n  <outbound>\r\n    <base />\r\n   \r\n   \r\n  </outbound>\r\n</policies>"
		},
		{
			"id": "88b6ca48-dc65-ed0e-6449-487c0eda7de9",
			"headers": "Authorization: {{authorization-token}}\nContent-Type: application/vnd.ms-azure-apim.policy+xml\nIf-Match: *\n",
			"url": "{{management-api-url}}//apis/{{api-id}}/operations/create-user/policy?api-version={{version}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466996686509,
			"name": "PUT json-threat policy",
			"description": "",
			"collectionId": "323d2bf2-44e6-12d1-59da-63c5246375b1",
			"rawModeData": "<policies>\r\n  <inbound>\r\n    \r\n    <set-variable name=\"contentAsString\" value='@((string)context.Request.Body.As&lt;String&gt;(preserveContent: true))' />\r\n    <set-variable name=\"ALLOWED_CONTENT_LENGTH\" value='@{return 4096;}' />\r\n    \r\n    <choose>\r\n        <when condition='@(((string)context.Variables[\"contentAsString\"]).Length &gt;=  ((int)context.Variables[\"ALLOWED_CONTENT_LENGTH\"]))'>\r\n            <set-variable name=\"endTimeTicks\" value='@{ return DateTime.UtcNow.Ticks;}' />\r\n            <return-response >\r\n                <set-status code=\"400\" reason='@{ return \"JSON ERROR: Content length is greater than the permissible limit of: \" + (int)context.Variables[\"ALLOWED_CONTENT_LENGTH\"] + \" byte(s)\"; }' />\r\n            </return-response>\r\n        </when>       \r\n    </choose>                  \r\n   \r\n    <base />\r\n  </inbound>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n</policies>"
		}
	]
}